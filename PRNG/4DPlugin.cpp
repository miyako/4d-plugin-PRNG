/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : PRNG
 #	author : miyako
 #	2017/04/27
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include <random>
#include <iostream>

static std::random_device rd;
static std::mt19937 rng(rd());

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
			// --- MT19937
		case 1 :
			uniform_int_distribution(pResult, pParams);
			break;

	}
}

// ------------------------------------ MT19937 -----------------------------------

void uniform_int_distribution(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	std::uniform_int_distribution<int> uid(Param1.getIntValue(), Param2.getIntValue());

	returnValue.setIntValue(uid(rng));
	returnValue.setReturn(pResult);
}

